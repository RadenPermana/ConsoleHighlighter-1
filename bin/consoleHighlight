#!/usr/bin/env node

var fs = require('fs'), 
    path = require('path'),
    showUsage = false,
    source, ch, extension, code, types, lines,

    BASE = path.resolve(path.join(path.dirname(__filename), '..'));

// Load the console highlighter package
ch = require(BASE);

// Determine file to use
if (process.argv.length > 2) {
  if (process.argv[2].toLowerCase() === "update") {
    var proc = require('child_process'),
        cwd = process.cwd();
    process.chdir(BASE);
    console.log('Updating syntax highlighter code...');
    proc.exec('git submodule foreach --recursive git pull', function(i,o,e) {
      console.log('\n%s\nComplete', o);
      process.chdir(cwd);
      process.exit(0);
    });
    return;
  }

  try {
    source = path.resolve(process.argv[2]);
    extension = path.extname(source).substring(1);
    code = fs.readFileSync(source, 'utf8').toString();

    if (process.argv.length > 3) {
      extension = process.argv[3];
    }
  }
  catch (e) {
    showUsage = true;
  }
}
else {
  showUsage = true;
}

if (showUsage) {
  var lines = ['\x1b[1mKnown types:\x1b[0m '], lineNo = 0, i, comma,
  exe = path.basename(process.argv[1]), blue = '\x1b[34m',
  clear = '\x1b[0m', bold = '\x1b[1m', nobold = '\x1b[0m',
  underlined = '\x1b[4m';

  console.log('\n%sUsage:%s %s <file|update> [type]', bold, nobold, exe);
  console.log('  %s<%sfile%s>%s   - path to the file to highlight',
      blue, clear, blue, clear);
  console.log('  %s[%supdate%s]%s - update syntax engine',
      blue, clear, blue, clear);
  console.log('  %s[%stype%s]%s   - alternate file extension (without period)',
      blue, clear, blue, clear);
  console.log('             in order to override detected brush highlighter');
  console.log('             (note does nothing if update supplied)\n');
  console.log('Alternatively, specifying "update" instead of a file');
  console.log('will cause the syntax highlighting brushes to be updated');
  
  types = ch.BrushManager.getKnownTypes();
  for (i = 0; i < types.length; i++) {
    comma = (i === types.length - 1) ? '' : ', ';
    if ((lines[lineNo].length + types[i].length + comma.length) < 60) {
      lines[lineNo] += types[i] + comma;
    } 
    else {
      lineNo++;
      lines[lineNo] = '  ';
    }
  }

  console.log('\n%s', lines.join('\n'));
  process.exit(0);
}

// Load brush and execute highlighter
if (code && extension) {  
  console.log(ch.highlight(code, extension));
}
else {
  console.log('Unable to determine highlighter for %s.', source);
}
